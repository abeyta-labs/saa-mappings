name: Reusable Mapping Workflow

on:
  workflow_call:
    inputs:
      mapping-name:
        description: 'Name of the mapping (e.g., shedlock, spring-boot, etc.)'
        required: true
        type: string
      runs-on:
        description: 'Runner type (e.g., ubuntu-latest, self-hosted)'
        required: false
        type: string
        default: 'ubuntu-latest'
    secrets:
      GH_PULL_REQUEST_TOKEN:
        required: true
      BROADCOM_SPRING_USERNAME:
        required: true
      BROADCOM_SPRING_PASSWORD:
        required: true
jobs:
  mapping:
    runs-on: ${{ inputs.runs-on }}
    permissions:
      contents: write
      pull-requests: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up JDK
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'liberica'
      - name: Configure Maven Settings
        uses: 's4u/maven-settings-action@v3.1.0'
        with:
          servers: '[{"id": "tanzu-spring-release", "username":  "${{ secrets.BROADCOM_SPRING_USERNAME }}", "password": "${{ secrets.BROADCOM_SPRING_PASSWORD }}"}]'
          repositories: '[{"id":"tanzu-spring-release", "name":"Spring Enterprise Supported Releases","url":"${{vars.BROADCOM_SPRING_REPOSITORY}}","snapshots":{"enabled":false}}]'
          pluginRepositories: '[{"id":"tanzu-spring-release", "name":"Spring Enterprise Supported Releases","url":"${{vars.BROADCOM_SPRING_REPOSITORY}}","snapshots":{"enabled":false}}]'
      - name: Configure Gradle Repos
        run: |
          mkdir -p ~/.gradle/init.d
          cat > ~/.gradle/init.d/broadcom.gradle << 'EOF'
            allprojects {
                repositories {
                    mavenLocal()
                    maven {
                        url = System.getenv("BROADCOM_SPRING_REPOSITORY")
                        name = "Spring Enterprise Supported Releases"
                        credentials {
                            username = System.getenv("BROADCOM_SPRING_USERNAME")
                            password = System.getenv("BROADCOM_SPRING_PASSWORD")
                        }
                    }
                    mavenCentral()
                }
            }
          
            settingsEvaluated { settings ->
                settings.pluginManagement {
                    repositories {
                        mavenLocal()
                        maven {
                            url = System.getenv("BROADCOM_SPRING_REPOSITORY")
                            name = "Spring Enterprise Supported Releases"
                            credentials {
                                username = System.getenv("BROADCOM_SPRING_USERNAME")
                                password = System.getenv("BROADCOM_SPRING_PASSWORD")
                            }
                        }
                        mavenCentral()
                    }
                }
            }
          EOF
      - name: Build mapping
        continue-on-error: true
        env:
          GIT_TOKEN_FOR_PRS: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          ARTIFACTORY_TOKEN: ${{ secrets.BROADCOM_SPRING_PASSWORD }}
          CLI_DOWNLOAD_URL: ${{ vars.SPRING_APP_ADVISOR_DOWNLOAD_URL }}
          BROADCOM_SPRING_USERNAME: ${{ secrets.BROADCOM_SPRING_USERNAME }}
          BROADCOM_SPRING_PASSWORD: ${{ secrets.BROADCOM_SPRING_PASSWORD }}
          BROADCOM_SPRING_REPOSITORY: ${{ vars.BROADCOM_SPRING_REPOSITORY }}
          SCRIPT_TO_RUN: scripts/mapping/${{ inputs.mapping-name }}.sh
        run: |
          # download the cli
          curl -L -H "Authorization: Bearer $ARTIFACTORY_TOKEN"  -o /tmp/advisor-linux.tar -X GET $CLI_DOWNLOAD_URL
          tar -xf /tmp/advisor-linux.tar -C /tmp/ --strip-components=1 --exclude=./META-INF
          
          chmod +x "$SCRIPT_TO_RUN"
          $SCRIPT_TO_RUN
          
          # clean up
          rm /tmp/advisor-linux.tar
          rm /tmp/advisor
      - name: Get errors if exist
        if: always() && hashFiles('.advisor/errors/') != ''
        run: |
          cat .advisor/errors/*
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GH_PULL_REQUEST_TOKEN }}
          commit-message: "${{ inputs.mapping-name }} mapping update"
          title: "${{ inputs.mapping-name }} mapping update"
          body: "Automatic ${{ inputs.mapping-name }} mapping update"
          branch: "${{ inputs.mapping-name }}-mapping-update"
          add-paths: ".advisor/mappings"